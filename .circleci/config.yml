# CircleCI 2.1 Config Overview: https://discuss.circleci.com/t/circleci-2-1-config-overview/26057
version: 2.1

aliases:
  - &packages_node_modules_cache_dir packages-node_modules
  - &cache_version v18

commands:
  prepare_workspace:
    parameters:
      lock_files:
        type: string
        default: "packages/*/package-lock.json packages/*/package.json package-lock.json"
      packages_node_modules_cache_dir:
        type: string
        default: *packages_node_modules_cache_dir
      cache_version:
        type: string
        default: *cache_version
      cache_prefix:
          type: string
          default: ""
      skip_deps:
        type: string
        default: ""

    steps:
      - checkout:
          path: ~/project

      - run:
          name: Generate packages lock files cache key
          command: cat << parameters.lock_files >> >> packages-lock-cache-key.txt

      - restore_cache:
          key: << parameters.cache_prefix >>cache-<< parameters.cache_version >>-{{ arch }}-{{ checksum "packages-lock-cache-key.txt" }}

      - run:
          name: Restore packages node_modules
          command: |
            if [ -d "<< parameters.packages_node_modules_cache_dir >>" ]; then
              for p in $(ls "<< parameters.packages_node_modules_cache_dir >>"); do
                FROM="<< parameters.packages_node_modules_cache_dir >>/$p/node_modules"
                TO="packages/$p"

                if [ -d "$FROM" ]; then
                  echo "Moving $p node_modules"
                  mv $FROM $TO
                fi
              done

              echo "export HAD_CACHE=true" >> $BASH_ENV
            fi

      - run:
          name: Install deps
          command: |
            if [ ! -d node_modules ]; then
              PI_OPTS="-- --ignore=<< parameters.skip_deps >>" npm ci
            else
              echo "node_modules from cache exist. So skipping install."
            fi

  cache_deps:
    parameters:
      packages_node_modules_cache_dir:
        type: string
        default: *packages_node_modules_cache_dir
      cache_version:
        type: string
        default: *cache_version
      cache_prefix:
        type: string
        default: ""
    steps:
      - run:
          name: Prepare packages node_modules for caching
          command: |
            if [[ -z "$HAD_CACHE" ]]; then
              mkdir -p << parameters.packages_node_modules_cache_dir >>
              for p in $(ls packages); do
                FROM="packages/$p/node_modules"
                TO="<< parameters.packages_node_modules_cache_dir >>/$p"

                if [ -d "$FROM" ]; then
                  echo "Moving $p node_modules"
                  mkdir -p $TO
                  mv $FROM $TO
                fi
              done
            fi

      - save_cache:
          key: << parameters.cache_prefix >>cache-<< parameters.cache_version >>-{{ arch }}-{{ checksum "packages-lock-cache-key.txt" }}
          paths:
            - ~/.npm
            - ~/.cache
            - ~/project/node_modules
            - ~/project/<< parameters.packages_node_modules_cache_dir >>

jobs:
  build:
    docker:
      - image: circleci/node:12.16.3
    resource_class: xlarge

    working_directory: ~/project

    environment:
      - TEST_RESULTS_DIR: test-results

    steps:
      - prepare_workspace

      - run:
          name: Setup dirs
          command: mkdir -p $TEST_RESULTS_DIR

      - run:
          name: Packages security audit
          command: |
            if [[ -z "$CI_PULL_REQUEST" ]]; then
              echo "Doing audit..."
              if [[ -n $(npm audit | grep -E "(High | Critical)" -B3 -A10) ]]; then
                # exit 1
                # Todo: uncomment this after lerna which has dependent package vulnerability releases new version
                echo "Has audit error"
              fi
            else
              echo "Not a commit build skipping audit"
            fi

      - run:
          name: JavaScript Linter
          command: npm run lint

      - run:
          name: JS Test Suite
          command: |
            export JEST_JUNIT_OUTPUT_DIR="$PWD/$TEST_RESULTS_DIR/junit"
            npm test -- -- -- --ci -w=25

      - cache_deps

      - store_test_results:
          path: ~/project/test-results

      - store_artifacts:
          path: ~/project/test-results

  deploy:
    docker:
      - image: circleci/python:3.9.3
    resource_class: xlarge

    working_directory: ~/project

    steps:
      - run:
          name: Check if Sly Master Repo
          command: |
            if [[ $CIRCLE_PROJECT_USERNAME != "seniorly" ]]; then
              echo "Skipping Deployment since this is not a Sly Master Build"
              circleci step halt
            fi

      - checkout:
          path: ~/project

      - run:
          name: Install awscli
          command: sudo pip install awsebcli --upgrade

      - run:
          name: Set up environment
          command: |
            if [[ -n "$CIRCLE_TAG" ]]; then
              export VERSION=$CIRCLE_TAG
            else
              export LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
              export LATEST_COMMIT=$(git rev-parse --short HEAD)
              export NUMBER_OF_COMMITS=$(git rev-list --count HEAD ^$LATEST_TAG)
              export VERSION=$(git for-each-ref --format="%(refname:short)-$NUMBER_OF_COMMITS-$LATEST_COMMIT" --sort=-authordate --count=1 refs/tags)
            fi

            echo "export VERSION=$VERSION" >> ~/new_env_vars

            if [[ -n "$CIRCLE_TAG" ]]; then
              echo "export EB_ENV=slyreact-staging" >> ~/new_env_vars
              echo "export CYPRESS_baseUrl=http://www.myseniorly.com" >> ~/new_env_vars
            # elif [[ -n "$CIRCLE_PR_NUMBER" ]]; then
            #   echo "export EB_ENV=slyreact-test" >> ~/new_env_vars
            #   echo "export CYPRESS_baseUrl=http://test.teamseniorly.com" >> ~/new_env_vars
            elif [[ "$CIRCLE_BRANCH" = "master" ]]; then
              echo "export EB_ENV=slyreact-staging" >> ~/new_env_vars
              echo "export CYPRESS_baseUrl=http://www.myseniorly.com" >> ~/new_env_vars
            else
              export FEATURE_ENV=$(eb list | grep -w "$CIRCLE_BRANCH")
              if [[ "$FEATURE_ENV" == "slyreact-prod" || "$FEATURE_ENV" == "slyreact-staging" ]]; then
                echo "Tried to deploy to restricted env $FEATURE_ENV"
                return 1
              fi

              if [[ -n "$FEATURE_ENV" ]]; then
                echo "export EB_ENV=$FEATURE_ENV" >> ~/new_env_vars
                echo "export CYPRESS_baseUrl=http://$FEATURE_ENV.teamseniorly.com" >> ~/new_env_vars
              fi
            fi

            cat ~/new_env_vars >> $BASH_ENV
            source ~/new_env_vars

            echo "VERSION=$VERSION"
            echo "EB_ENV=$EB_ENV"

            if [[ -z "$EB_ENV" ]]; then
              circleci step halt
            fi

      # TODO: remove once circle ci starts supporting customizable notifications in workflows
      - run:
          name: Send deploy start notification
          command: |
            export DESC_MSG=$(~/project/.circleci/generate-deploy-status-message.sh)
            SLACK_NOTIFICATION_API_KEY=$SLACK_DEPLOY_NOTIFICATION_API_KEY ~/project/.circleci/push-slack-notification.sh -t "Starting deploy to $EB_ENV" \
              -tl "$CIRCLE_BUILD_URL" -m "$DESC_MSG" -c "#66d3e4"

      - run:
          name: Deploy to EB
          command: |
            echo "Deploying $VERSION to $EB_ENV"
            eb use $EB_ENV
            export DEPLOY_FAILED=$(eb deploy $EB_ENV --timeout 60 -v -l $VERSION | tee /dev/tty | grep -c "ERROR")

            if [ "$DEPLOY_FAILED" -gt 0 ]; then
              exit 1
            fi

      # TODO: remove once circle ci starts supporting customizable notifications in workflows
      - run:
          name: Send deploy success notification
          command: |
            export DESC_MSG=$(~/project/.circleci/generate-deploy-status-message.sh)
            SLACK_NOTIFICATION_API_KEY=$SLACK_DEPLOY_NOTIFICATION_API_KEY ~/project/.circleci/push-slack-notification.sh -t "Successfully deployed to $EB_ENV" \
              -tl "$CIRCLE_BUILD_URL" -m "$DESC_MSG" -c "#42c88a"
      - run:
          name: Send deploy failed notification
          when: on_fail
          command: |
            export DESC_MSG=$(~/project/.circleci/generate-deploy-status-message.sh)
            SLACK_NOTIFICATION_API_KEY=$SLACK_DEPLOY_NOTIFICATION_API_KEY ~/project/.circleci/push-slack-notification.sh -t "Failed deploying to $EB_ENV" \
              -tl "$CIRCLE_BUILD_URL" -m "$DESC_MSG" -c "#ed5c5c"

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - new_env_vars

  e2e:
    docker:
      - image: cypress/included:7.4.0
        environment:
          # this enables colors in the output
          TERM: xterm
          HOST: http://www.seniorly.dev
          CYPRESS_BASE_URL: http://www.seniorly.dev
          CYPRESS_CHROME_WEB_SECURITY: false
          API_URL: http://www.seniorly.dev/v0
          DOMAIN: www.seniorly.dev
          HIDE_CHATBOX: false
      - image: redis:4
      - image: 249947021926.dkr.ecr.us-west-2.amazonaws.com/slyapi-db:latest
        environment:
          POSTGRES_DB: slydev
          POSTGRES_USER: slydev
          POSTGRES_PASSWORD: slydev
      - image: 249947021926.dkr.ecr.us-west-2.amazonaws.com/slyapi-goose:latest
        environment:
          SLY_DBHOST: localhost
          SLY_DBNAME: slydev
          SLY_DBUSER: slydev
          SLY_DBPASSWORD: slydev
          POSTGRES_PASSWORD: slydev
          POSTGRES_USER: slydev
          POSTGRES_DB: slydev
      - image: 249947021926.dkr.ecr.us-west-2.amazonaws.com/slyapi-pubsub:latest
        environment:
          SLY_DBHOST: localhost
          SLY_DBNAME: slydev
          SLY_DBUSER: slydev
          SLY_DBPASSWORD: slydev
          POSTGRES_PASSWORD: slydev
          POSTGRES_USER: slydev
          POSTGRES_DB: slydev
      - image: 249947021926.dkr.ecr.us-west-2.amazonaws.com/slyapi-worker:latest
        environment:
          SLY_DBHOST: localhost
          SLY_DBNAME: slydev
          SLY_DBUSER: slydev
          SLY_DBPASSWORD: slydev
          POSTGRES_PASSWORD: slydev
          POSTGRES_USER: slydev
          POSTGRES_DB: slydev
      - image: 249947021926.dkr.ecr.us-west-2.amazonaws.com/slyapi-slyapi:latest
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
        environment:
          SLY_DBHOST: localhost
          SLY_DBNAME: slydev
          SLY_DBUSER: slydev
          SLY_DBPASSWORD: slydev
          POSTGRES_PASSWORD: slydev
          POSTGRES_USER: slydev
          POSTGRES_DB: slydev
          SLY_APIRATELIMITENABLED: false
          SLY_REACT_RESOURCE_CENTER_ROUTE: resource-center
          SLY_REACT_HOST: http://www.seniorly.dev
          SLY_HOSTNAME: www.seniorly.dev
          SLY_APIHOSTNAME: http://www.seniorly.dev
          SLY_ROOTURL: http://www.seniorly.dev
          SLY_COOKIEDOMAIN: .seniorly.dev
          SLY_CORSORIGINS: http://www.seniorly.dev
          SLY_ELASTICSEARCH_URL: "https://elasticsearch.myseniorly.com"
    parallelism: 3
    resource_class: xlarge

    working_directory: ~/project

    steps:
      - prepare_workspace:
          cache_prefix: e2e-
          skip_deps: "{@sly-react/storybook}"

      # - run:
      #     name: Clone SlyApi
      #     command: git clone --single-branch --branch feature/docker git@github.com:seniorly/SlyApi.git ~/SlyApi

      # - run:
      #     command: |
      #       cat docker-compose-test.yml
      #       sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      #       sudo chmod +x /usr/local/bin/docker-compose
      #       docker-compose --version
      #       docker-compose -f docker-compose-test.yml up
      #     working_directory: ~/SlyApi
      #     background: true

      - run:
          name: Installing HAproxy
          command: |
            apt-get update
            apt-get -y install haproxy

      - run:
          name: Running HAProxy
          command: haproxy -f haproxy.conf
          working_directory: ~/project/packages/e2e
          background: true
          environment:


      - run:
          name: npm run build:web:prod
          command: npm run build:web:prod

      - run:
          name: npm run start:web:prod
          command: npm run start:web:prod
          background: true
      - run:
          name: Waiting for Local Go to be up and running
          command: npx wait-on -i 1000 -s 1 -t 120000 http-get://localhost:8080/v0/ping && npx wait-on -i 1000 -s 1 -t 120000 http-get://localhost:8080/v0/marketplace/communities/eskaton-village-placerville?include=similar-communities%2Cquestions%2Cagents

      - run:
          name: Waiting for Local React to be up and running
          command: npx wait-on -i 1000 -s 1 -t 120000 http-get://localhost:8000/ping && npx wait-on -i 1000 -s 1 -t 120000 http-get://localhost:8000/assisted-living/california/placerville/eskaton-village-placerville
      - run:
          name: Validate service is working
          command: |
            timeout 120 bash -c 'HTTPD=`curl -o /dev/null -w "%{http_code}\\n" -X POST -H "Content-Type: application/json" -d "{\"email\":\"slytest+admin@seniorly.com\",\"password\":\"nopassword\"}" http://localhost:8080/v0/platform/auth/login`
            echo $HTTPD
            until [ "$HTTPD" == "200" ]; do
              echo $HTTPD
              sleep 3
              HTTPD=`curl -o /dev/null -w "%{http_code}\\n" -X POST -H "Content-Type: application/json" -d "{\"email\":\"slytest+admin@seniorly.com\",\"password\":\"nopassword\"}" http://localhost:8080/v0/platform/auth/login`
            done'
      - run:
          name: Run Cypress tests
          working_directory: ~/project/packages/e2e
          command: |
            TESTFILES=$(circleci tests glob "cypress/integration/**/*.js" | circleci tests split --split-by=timings | xargs | sed -e 's/ /,/g')
            cypress run --reporter cypress-multi-reporters --reporter-options "configFile=reporter-config.json" --spec $TESTFILES
      - run:
          name: Format Test Results
          working_directory: ~/project/packages/e2e
          command: npm run fixresults

      - cache_deps:
          cache_prefix: e2e-

      - store_test_results:
          path: ~/project/packages/e2e/cypress/results
      - store_artifacts:
          path: ~/project/packages/e2e/cypress/videos

      - store_artifacts:
          path: ~/project/packages/e2e/cypress/screenshots


# REFERENCE CODE for OPENVPN

      # - run:
      #     name: NPM Install and Run Local SlyReact in Background
      #     command: |
      #       npm install
      #       npm run dev
      #     working_directory: ~/project
      #     background: true

      # - run:
      #     name: Install deps
      #     command: |
      #       if [ ! -d node_modules ]; then
      #         npm ci
      #       else
      #         echo "node_modules from cache exist. So skipping install."
      #       fi

      # # The PEMs and credentials are set in OPENVPN context and are echoed into files
      # - run:
      #     name: Creating OpenVPN Client Credential file
      #     command: |
      #       echo -e "$OPENVPN_USERNAME\n$OPENVPN_PASSWORD" >> openVPN_cred.txt
      #       echo -e "$OPENVPN_CA" >> ca.pem
      #       echo -e "$OPENVPN_CERT" >> cert.pem
      #       echo -e "$OPENVPN_KEY" >> key.pem
      #       echo -e "$OPENVPN_TLS_AUTH" >> tls_auth.pem

      # # PEMs should be escaped like explained here https://discuss.circleci.com/t/issues-storing-firebase-keys-as-environment-variable/6197/6
      # - run:
      #     name: Creating OpenVPN Tunnel
      #     command: sudo openvpn --config circleci.ovpn --auth-user-pass openVPN_cred.txt --ca ca.pem --cert cert.pem --key key.pem --tls-auth tls_auth.pem --daemon

      # - run:
      #     name: Waiting for Local Go to be up and running
      #     command: npx wait-on -t 900000 http://localhost:8080

      # - run:
      #     name: Waiting for Local React to be up and running
      #     command: npx wait-on http://localhost:8000

      # - run:
      #     name: Curl whether API is accessible
      #     command: curl http://www.lvh.me/v0/ping

      # - save_cache:
      #     key: cache-v1-{{ arch }}-{{ checksum "package.json" }}
      #     paths:
      #       - ~/.npm
      #       - ~/.cache
      #       - ~/project/node_modules
      #       - ~/project/e2e/node_modules

      # - run:
      #     name: Run Cypress tests
      #     command: |
      #       echo "Running cypress"
      #       npx cypress run --reporter junit --reporter-options "mochaFile=$TEST_RESULTS/cypress-test-output.xml,toConsole=true" --spec "cypress/integration/**/*"

      # - run:
      #     name: Closing OpenVPN Tunnel
      #     command: sudo killall openvpn

      # # TODO: remove once circle ci starts supporting customizable notifications in workflows
      # - run:
      #     name: Send tests success notification
      #     command: |
      #       if [ -z "$CIRCLE_PULL_REQUEST" ] && [ "$CIRCLE_BRANCH" == "master" ]; then
      #         export TEST_OUTPUT=$(cat test_output)
      #         SLACK_NOTIFICATION_API_KEY=$SLACK_TEST_NOTIFICATION_API_KEY ../.circleci/push-slack-notification.sh -t "smoke tests success" \
      #           -tl "$CIRCLE_BUILD_URL" -m "$TEST_OUTPUT" -c "#42c88a"
      #       fi

      # - run:
      #     name: Send tests failed notification
      #     when: on_fail
      #     command: |
      #       if [ -z "$CIRCLE_PULL_REQUEST" ] && [ "$CIRCLE_BRANCH" == "master" ]; then
      #         export DESC_MSG=$(cat test_output)
      #         if [ -z "$DESC_MSG" ]; then
      #           DESC_MSG="failed before running tests"
      #         fi
      #         SLACK_NOTIFICATION_API_KEY=$SLACK_TEST_NOTIFICATION_API_KEY ../.circleci/push-slack-notification.sh -t "smoke tests failed" \
      #           -tl "$CIRCLE_BUILD_URL" -m "<!channel> $DESC_MSG" -c "#ed5c5c"
      #       fi

workflows:
  build:
    jobs:
      # run build (unit tests, linting, quality checks etc etc) for PRs
      - build:
          filters:
            tags:
              only: /^v.*/
      - e2e:
          context: OPENVPN
          filters:
            tags:
              only: /^v.*/
      - deploy:
          requires:
            - build
            # - e2e TODO: remove after e2e is fixed. skip to unblock deploy
          filters:
            tags:
              only: /^v.*/
