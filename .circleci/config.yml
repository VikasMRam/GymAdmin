# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:7.10

    working_directory: ~/repo

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package-lock.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies

      - run: npm install

      - run:
          name: Setup dirs
          command: mkdir -p $TEST_RESULTS

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
#     - run:
#         name: "JavaScript Linter"
#         command: yarn lint -- --format junit -o "$TEST_RESULTS/js-lint-results.xml"
      # run tests!
      - run:
          name: "JS Test Suite"
          command: |
            export JEST_JUNIT_OUTPUT="$TEST_RESULTS/junit/js-test-results.xml"
            npm test -- --ci --testResultsProcessor="jest-junit" --maxWorkers=10

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  deploy:
    docker:
      - image: circleci/python:2.7
    working_directory: ~/repo
    steps:
      - run:
          name: Check if Sly Master Repo
          command: |
            if [[ $CIRCLE_PROJECT_USERNAME != "seniorly" ]]; then
              echo "Skipping Deployment since this is not a Sly Master Build"
              circleci step halt
            fi
      # TODO: remove once circle ci starts supporting customizable notifications in workflows
      - checkout
      - run:
          name: Send deploy start notification
          command: |
            export GIT_COMMIT_DESC=$(git log --format=oneline --pretty=format:"Commit SHA: %H%nAuthor: %an%nCommitted on: %cd%nCommit message: %s" -n 1 $CIRCLE_SHA1)
            ./.circleci/push-slack-notification.sh "starting deploy to slyreact-$SLY_ENV - \n $GIT_COMMIT_DESC" "#66d3e4"
      - run:
          name: Install awscli
          command: |
            sudo pip install awsebcli --upgrade
      - run:
          name: Put version in VERSION file
          command: |
            if [[ "$CIRCLE_BRANCH" = "master" ]]; then
              git describe --tags > ./VERSION
              cat ./VERSION
              git add ./VERSION
            fi
      - run:
          name: Deploy to EB
          command: |
            if [[ "$CIRCLE_BRANCH" = "master" ]]; then
              export STAGED="--staged"
            fi
            export DEPLOY_FAILED=$(eb deploy slyreact-$SLY_ENV -v $STAGED | tee /dev/tty | grep -c "ERROR")
            if [ "$DEPLOY_FAILED" -gt 0 ]; then
              exit 1
            fi
      - run:
          name: Start Smoke test
          command: |
            curl -u ${CIRCLE_API_USER_TOKEN}: \
              -d build_parameters[CIRCLE_JOB]=build \
              https://circleci.com/api/v1.1/project/github/seniorly/SlyTest/tree/master
      # TODO: remove once circle ci starts supporting customizable notifications in workflows
      - run:
          name: Send deploy success notification
          command: |
            export GIT_COMMIT_DESC=$(git log --format=oneline --pretty=format:"Commit SHA: %H%nAuthor: %an%nCommitted on: %cd%nCommit message: %s" -n 1 $CIRCLE_SHA1)
            ./.circleci/push-slack-notification.sh "successfully deployed to slyreact-$SLY_ENV - \n $GIT_COMMIT_DESC" "#42c88a"
      - run:
          name: Send deploy failed notification
          when: on_fail
          command: |
            export GIT_COMMIT_DESC=$(git log --format=oneline --pretty=format:"Commit SHA: %H%nAuthor: %an%nCommitted on: %cd%nCommit message: %s" -n 1 $CIRCLE_SHA1)
            ./.circleci/push-slack-notification.sh "failed deploying to slyreact-$SLY_ENV - \n $GIT_COMMIT_DESC" "#ed5c5c"
workflows:
  version: 2
  build-development:
    jobs:
      # run build (unit tests, linting, quality checks etc etc) for PRs
      - build
      - deploy:
          context: ReactDev
          requires:
            - build
          filters:
            branches:
              only:
                - master
  build-staging:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - deploy:
          context: ReactStaging
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
