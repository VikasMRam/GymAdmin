# CircleCI 2.1 Config Overview: https://discuss.circleci.com/t/circleci-2-1-config-overview/26057
# Node orb: https://circleci.com/orbs/registry/orb/circleci/node
version: 2.1

orbs:
  node: circleci/node@1.1.2

jobs:
  build:
    docker:
      - image: circleci/node:8.12 # though we use 8.9 only 8.12 has npm that supports npm ci

    working_directory: ~/project

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout:
          path: ~/project

      - run:
          name: Setup dirs
          command: mkdir -p $TEST_RESULTS

      - node/with-cache:
          cache-key: package-lock.json
          cache-version: v3
          use-strict-cache: true
          include-branch-in-cache-key: false
          steps:
            - run:
                name: Install deps
                command: |
                  if [ ! -d node_modules ]; then
                    npm ci
                  else
                    echo "node_modules from cache exist. So skipping install."
                  fi

            - run:
                name: JavaScript Linter
                command: npm run lint -- --format junit -o "$TEST_RESULTS/js-lint-results.xml"

            - run:
                name: JS Test Suite
                command: |
                  export JEST_JUNIT_OUTPUT="$TEST_RESULTS/junit/js-test-results.xml"
                  npm test -- --ci --maxWorkers=12

      - store_test_results:
          path: /tmp/test-results

      - store_artifacts:
          path: /tmp/test-results

      - persist_to_workspace:
          root: ~
          paths:
            - project

  deploy:
    docker:
      - image: circleci/python:2.7

    working_directory: ~/project

    steps:
#      - run:
#          name: Check if Sly Master Repo
#          command: |
#            if [[ $CIRCLE_PROJECT_USERNAME != "seniorly" ]]; then
#              echo "Skipping Deployment since this is not a Sly Master Build"
#              circleci step halt
#            fi

      - attach_workspace:
          at: ~

      - run:
          name: Install awscli
          command: |
            sudo pip install awsebcli --upgrade

      - run:
          name: Choosing EB_ENV
          command: |
            export LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            export LATEST_COMMIT=$(git rev-parse --short HEAD)
            export NUMBER_OF_COMMITS=$(git rev-list --count HEAD ^$LATEST_TAG)
            git for-each-ref --format="%(refname:short)-$NUMBER_OF_COMMITS-$LATEST_COMMIT" --sort=-authordate --count=1 refs/tags > ./VERSION
            cat ./VERSION
            git add ./VERSION

            if [[ -n "$CIRCLE_TAG" ]]; then
              echo $CIRCLE_TAG > ./VERSION
              cat ./VERSION
              git add ./VERSION
              echo "export EB_ENV=slyreact-staging" >> $BASH_ENV
            elif [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "export EB_ENV=slyreact-test" >> $BASH_ENV
            elif [[ "$CIRCLE_BRANCH" = "master" ]]; then
              echo "export EB_ENV=slyreact-development" >> $BASH_ENV
            else
              FEATURE_ENV=$(eb list | grep -w "$CIRCLE_BRANCH" || true)
              if [[ "$FEATURE_ENV" = "slyreact-prod" || "$FEATURE_ENV" = "slyreact-staging" ]]; then
                echo "Tried to deploy to restricted env"
                echo $FEATURE_ENV
                return -1
              fi
              echo "export EB_ENV=$FEATURE_ENV" >> $BASH_ENV
            fi

            source $BASH_ENV

            if [[ -z "$EB_ENV" ]]; then
              circleci step halt
            fi

      # TODO: remove once circle ci starts supporting customizable notifications in workflows
      - run:
          name: Send deploy start notification
          command: |
            export DESC_MSG=$(./.circleci/generate-deploy-status-message.sh)
            ./.circleci/push-slack-notification.sh -t "Starting deploy to $EB_ENV" \
              -tl "$CIRCLE_BUILD_URL" -m "$DESC_MSG" -c "#66d3e4"

      - run:
          name: Deploy to EB
          command: |
            export V=$(cat ./VERSION)
            echo "Deploying to $EB_ENV"
            eb use $EB_ENV
            export DEPLOY_FAILED=$(eb deploy $EB_ENV --timeout 30 -v --staged -l $V | tee /dev/tty | grep -c "ERROR")

            if [ "$DEPLOY_FAILED" -gt 0 ]; then
              exit 1
            fi

      # TODO: remove once circle ci starts supporting customizable notifications in workflows
      - run:
          name: Send deploy success notification
          command: |
            export DESC_MSG=$(./.circleci/generate-deploy-status-message.sh)
            ./.circleci/push-slack-notification.sh -t "Successfully deployed to $EB_ENV" \
              -tl "$CIRCLE_BUILD_URL" -m "$DESC_MSG" -c "#42c88a"
      - run:
          name: Send deploy failed notification
          when: on_fail
          command: |
            export DESC_MSG=$(./.circleci/generate-deploy-status-message.sh)
            ./.circleci/push-slack-notification.sh -t "Failed deploying to $EB_ENV" \
              -tl "$CIRCLE_BUILD_URL" -m "$DESC_MSG" -c "#ed5c5c"

  test:
    machine: true
    # docker:
    #   - image: circleci/node:8.9-browsers

    working_directory: ~/project/e2e

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - attach_workspace:
          at: ~

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Installing Node.js
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            source ~/.bashrc
            nvm install 8
            node -v
            npm -v

      - run:
          name: Installing OpenVPN Client
          command: sudo apt-get install openvpn

      # The PEMs and credentials are set in OPENVPN context and are echoed into files
      - run:
          name: Creating OpenVPN Client Credential file
          command: |
            echo -e "$OPENVPN_USERNAME\n$OPENVPN_PASSWORD" >> openVPN_cred.txt
            echo -e "$OPENVPN_CA" >> ca.pem
            echo -e "$OPENVPN_CERT" >> cert.pem
            echo -e "$OPENVPN_KEY" >> key.pem
            echo -e "$OPENVPN_TLS_AUTH" >> tls_auth.pem

      # PEMs should be escaped like explained here https://discuss.circleci.com/t/issues-storing-firebase-keys-as-environment-variable/6197/6
      - run:
          name: Creating OpenVPN Tunnel
          command: sudo openvpn --config circleci.ovpn --auth-user-pass openVPN_cred.txt --ca ca.pem --cert cert.pem --key key.pem --tls-auth tls_auth.pem --daemon

      - run:
          name: npm install
          command: |
            source ~/.bashrc
            nvm use 8
            npm install
            npx cypress install

      - run:
          name: Setup dirs
          command: mkdir -p $TEST_RESULTS

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Curl www.teamseniorly.com
          command: curl www.teamseniorly.com

      - run:
          name: "JS Test Suite"
          command: |
            source ~/.bashrc
            nvm use 8
            export MOCHA_FILE="$TEST_RESULTS/junit/js-test-results.xml"
            BLUEBIRD_DEBUG=1 npm test 2>&1 | tee test_output

      - run:
          name: Closing OpenVPN Tunnel
          command: sudo killall openvpn

      # TODO: remove once circle ci starts supporting customizable notifications in workflows
      - run:
          name: Send tests success notification
          command: |
            if [ -z "$CIRCLE_PULL_REQUEST" ] && [ "$CIRCLE_BRANCH" == "master" ]; then
              export TEST_OUTPUT=$(cat test_output)
              ../.circleci/push-slack-notification.sh -t "smoke tests success" \
                -tl "$CIRCLE_BUILD_URL" -m "$TEST_OUTPUT" -c "#42c88a"
            fi
      - run:
          name: Send tests failed notification
          when: on_fail
          command: |
            if [ -z "$CIRCLE_PULL_REQUEST" ] && [ "$CIRCLE_BRANCH" == "master" ]; then
              export DESC_MSG=$(cat test_output)
              if [ -z "$DESC_MSG" ]; then
                DESC_MSG="failed before running tests"
              fi
              ../.circleci/push-slack-notification.sh -t "smoke tests failed" \
                -tl "$CIRCLE_BUILD_URL" -m "<!channel> $DESC_MSG" -c "#ed5c5c"
            fi

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results


workflows:
  version: 2
  build-development:
    jobs:
      # run build (unit tests, linting, quality checks etc etc) for PRs
      - build
      - deploy:
          context: ReactDev
          requires:
            - build
      - test:
          context: OPENVPN
          requires:
            - deploy
  build-staging:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - deploy:
          context: ReactStaging
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
