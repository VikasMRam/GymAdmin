# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:7.10

    working_directory: ~/repo

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package-lock.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies

      - run: npm install

      - run:
          name: Setup dirs
          command: mkdir -p $TEST_RESULTS

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
#     - run:
#         name: "JavaScript Linter"
#         command: yarn lint -- --format junit -o "$TEST_RESULTS/js-lint-results.xml"
      # run tests!
      - run:
          name: "JS Test Suite"
          command: JEST_JUNIT_OUTPUT="$TEST_RESULTS/junit/js-test-results.xml" npm test -- --ci --testResultsProcessor="jest-junit"

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  deploy:
    docker:
      - image: circleci/python:2.7
    working_directory: ~/repo
    steps:
      - run:
          name: Check if Sly Master Repo
          command: |
            echo $CIRCLE_PROJECT_USERNAME
            if [[ $CIRCLE_PROJECT_USERNAME != "seniorly" ]]; then
              echo "Skip doing stuff since it is a PR."
              circleci step halt
            else
              echo "blah"
            fi
      - checkout
      - run:
          name: Install awscli
          command: |
            sudo pip install awsebcli --upgrade
    #   - run:
    #       name: Create AWS credentials manually
    #       command: |
    #         mkdir ~/.aws
    #         touch ~/.aws/config
    #         chmod 600 ~/.aws/config
    #         echo "[profile eb-cli]" > ~/.aws/config
    #         echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/config
    #         echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/config
      - run:
          name: Deploy to EB if branch is Master
          command: |
            #  eb use server-backend-env --profile eb-cli
             eb deploy slyreact-staging -v
workflows:
  version: 2
  build-deploy:
    jobs:
      # - build
      - deploy:
          # requires:
            # - build
          filters:
            branches:
              only: 
                - master